#Область СлужебныйПрограммныйИнтерфейс

#Область Серилизация

//Серилизует данные в JSON 
//
//Параметры:
// Данные - Произвольный
//
//Возвращаемое значение:
// - Строка
// - Неопределено
Функция ЗаписатьДанныеВJSON(Знач Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON());
	
	НастройкаСерилизацииJSON = Новый НастройкиСериализацииJSON();
	НастройкаСерилизацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением;
	НастройкаСерилизацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

	Попытка
		ЗаписатьJSON(ЗаписьJSON, Данные, НастройкаСерилизацииJSON);
		Возврат ЗаписьJSON.Закрыть();
	Исключение
		ЗаписьЖурналаРегистрации("JWT", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Прочитать строку JSON.
// 
// Параметры:
//  СтрокаJSON - Строка - строка для десерилизации
//  ИменаСвойстСоЗначениямиДата - Массив из Строка, Строка -  Имена свойст со значениями дата
//  ПрочитатьВСоответствие - Булево -  Прочитать в соответствие, по умолчанию Истина 
// 
// Возвращаемое значение:
//  Неопределено, Произвольный -  Прочитать строку JSON
Функция ПрочитатьСтрокуJSON(Знач СтрокаJSON, 
							Знач ИменаСвойстСоЗначениямиДата = Неопределено, 
							ПрочитатьВСоответствие = Истина) Экспорт
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Попытка
		Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие, ИменаСвойстСоЗначениямиДата);
	Исключение
		ЗаписьЖурналаРегистрации("JWT", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область ОбработкаОшибок

// Сформировать текст ошибки.
// 
// Параметры:
//  ИнформацияОбОшибке - Неопределено, ИнформацияОбОшибке -  Информация об ошибке
//  HTTPЗапрос - Неопределено, HTTPСервисЗапрос -  HTTPЗапрос
// 
// Возвращаемое значение:
//  Строка - текст ошибки
Функция СформироватьТекстОшибки(ИнформацияОбОшибке = Неопределено, HTTPЗапрос = Неопределено) Экспорт
	
	МассивОшибок = Новый Массив;
	
	Если НЕ ИнформацияОбОшибке = Неопределено Тогда
		МассивОшибок.Добавить(СтрШаблон("%1 %2", ИнформацияОбОшибке.ИмяМодуля, ИнформацияОбОшибке.НомерСтроки));
		МассивОшибок.Добавить(ИнформацияОбОшибке.Описание);
	КонецЕсли;
	
	Если ТипЗнч(HTTPЗапрос) = Тип("HTTPСервисЗапрос") Тогда
		МассивОшибок.Добавить(СтрШаблон("HTTP метод: %1", HTTPЗапрос.HTTPМетод));
		МассивОшибок.Добавить(СтрШаблон("БазовыйURL: %1", HTTPЗапрос.БазовыйURL));
		МассивОшибок.Добавить(СтрШаблон("Заголовки %1", ЗаписатьДанныеВJSON(HTTPЗапрос.Заголовки)));
		МассивОшибок.Добавить(СтрШаблон("Параметры запроса: %1", ЗаписатьДанныеВJSON(HTTPЗапрос.ПараметрыЗапроса)));
		МассивОшибок.Добавить(СтрШаблон("Параметры URL: %1", ЗаписатьДанныеВJSON(HTTPЗапрос.ПараметрыURL)));
		МассивОшибок.Добавить(СтрШаблон("Тело: %1", HTTPЗапрос.ПолучитьТелоКакСтроку()));
	КонецЕсли;

	Возврат СтрСоединить(МассивОшибок, ПереводСтроки());	

КонецФункции

// Перевод строки.
// 
// Возвращаемое значение:
//  Строка -  Перевод строки
Функция ПереводСтроки() Экспорт
	Возврат Символы.ПС + Символы.ВК;
КонецФункции

#КонецОбласти

#Область HTTPЗапросы

// Сформировать ответ.
// 
// Параметры:
//  Данные - Неопределено -  Данные
//  Ошибка - Неопределено -  Ошибка
//  КодОтвета - Число -  Код ответа
//  ЭтоТокен - Булево -  Это токен
// 
// Возвращаемое значение:
//  HTTPСервисОтвет -  Сформированый ответ
Функция СформироватьОтвет(Данные = Неопределено, Ошибка = Неопределено, КодОтвета = 200, ЭтоТокен = Ложь) Экспорт

//TODO: Добавить описание типов параметров функции

	Ответ = Новый HTTPСервисОтвет(КодОтвета);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Если НЕ ЭтоТокен Тогда
		ДанныеОтвета = Новый Соответствие;
		ДанныеОтвета.Вставить("response", Данные);
		ДанныеОтвета.Вставить("error", Ошибка);
	Иначе
		ДанныеОтвета = Данные;
	КонецЕсли;
	
	ДанныеJSON = ЗаписатьДанныеВJSON(ДанныеОтвета);
	
	Ответ.УстановитьТелоИзСтроки(ДанныеJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
	
КонецФункции

// Получить данные из запроса.
// 
// Параметры:
//  Запрос - HTTPСервисЗапрос
// 
// Возвращаемое значение:
// 	Произвольный
//  
Функция ПолучитьДанныеИзЗапроса(Запрос) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		ДанныеJSON = Запрос.ПолучитьТелоКакСтроку();
		Результат = ПрочитатьСтрокуJSON(ДанныеJSON);
	Исключение
		ЗаписьЖурналаРегистрации("JWT", УровеньЖурналаРегистрации.Ошибка,,,ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат	

КонецФункции


#КонецОбласти

#КонецОбласти
